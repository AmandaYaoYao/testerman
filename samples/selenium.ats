# __METADATA__BEGIN__
# <?xml version="1.0" encoding="utf-8" ?>
# <metadata version="1.0">
# <description>description</description>
# <prerequisites>prerequisites</prerequisites>
# <parameters>
# <parameter name="PX_SELENIUM_RC_HOST" default="localhost" type="string"><![CDATA[]]></parameter>
# <parameter name="PX_SELENIUM_RC_PORT" default="4444" type="string"><![CDATA[]]></parameter>
# </parameters>
# </metadata>
# __METADATA__END__
##
# Sample script, demonstrating (and basically testing)
# the selenium probe.
#
# To run this test, you should have a running Selenium RC on PX_SELENIUM_RC_HOST:PX_SELENIUM_RC_PORT and firefox available
# on this host.
#
##

enable_debug_logs()

class TC_SELENIUM_PROBE(TestCase):
	"""
	Query testerman from google.com via Selenium, and make sure testerman.fr appears in the results.
	"""
	def body(self):
		sel = self.mtc['sel']
		port_map(sel, self.system['selenium_rc'])

		t = Timer(15.0)
		t.start()

		# Let's search "testerman TTCN-3" from google, and expect testerman.fr to be listed in the results
		# Notice that we are using RC verbs, not something like clickAndWait which is only available from the Selenium IDE.
		sel.send( ('open', { 'target': '/' }) )
		sel.send( ('type', { 'target': 'q', 'value': 'testerman TTCN-3' }) )
		sel.send( ('clickAndWait', { 'target': 'btnG' }) )
		# Use isTextPresent that "returns" a bool instead of assertTextPresent that will raise an exception if not present.
		# This enables to get the test logic back into Testerman.
		sel.send( ('isTextPresent', { 'target': '*testerman.fr*' }) )
		
		alt([
			[ sel.RECEIVE(True),
				lambda: log("OK, testerman.fr is correctly indexed by Google"),
				lambda: setverdict(PASS),
			],
			[ sel.RECEIVE(),
				lambda: log("Oops, testerman.fr is not indexed by Google anymore ! This must be a (Google) regression, don't you think ?"),
				lambda: setverdict(FAIL),
			],
			[ t.TIMEOUT, 
				lambda: setverdict(INCONC),
				lambda: stop()
			],
		]
		)


##
# Test Adapter Configurations
##

conf = TestAdapterConfiguration('local')
conf.bind('selenium_rc', 'probe:selenium', 'selenium', server_url = 'http://www.google.com', rc_host = get_variable('PX_SELENIUM_RC_HOST'), rc_port = get_variable('PX_SELENIUM_RC_PORT'), browser = 'firefox')

##
# Control definition
##
with_test_adapter_configuration('local')
TC_SELENIUM_PROBE().execute()

