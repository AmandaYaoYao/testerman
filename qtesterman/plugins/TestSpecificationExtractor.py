# -*- coding: utf-8 -*-
##
# This file is part of Testerman, a test automation system.
# Copyright (c) 2009 QTesterman contributors
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
##

##
# A documentation generator plugin that
# extracts test specifications from an ATS whose TestCases contain
# the following tags:
#
# @author
# @prerequisites
# @state
##

from PyQt4.Qt import *

import os
import base64

import Plugin
import PluginManager
import DocumentModels

# Plugin ID, as generated by uuidgen / uuid.uuid1()
PLUGIN_ID = '8ce4cf4f-2451-11de-9b79-005056c00008'
PLUGIN_LABEL = "Test specification extraction"
PLUGIN_DESCRIPTION = "Extracts Test Specification from an ATS"
PLUGIN_VERSION = "1.0.0"


# Resource creation dialog
class WTestSpecificationDialog(QDialog):
	"""
	Resource creation dialog.
	
	Path to the filename to import,
	the resource name/id,
	the importation type (bin, ascii, utf-8, ...)
	
	"""
	def __init__(self, parent = None):
		QDialog.__init__(self, parent)
		self.__createWidgets()

	def __createWidgets(self):
		layout = QVBoxLayout()

		self._view = QTextEdit()
		self._view.setReadOnly(True)
		
		layout.addWidget(self._view)

		# Buttons
		self.okButton = QPushButton("Close")
		self.connect(self.okButton, SIGNAL("clicked()"), self.accept)
		buttonLayout = QHBoxLayout()
		buttonLayout.addStretch()
		buttonLayout.addWidget(self.okButton)
		layout.addLayout(buttonLayout)

		self.setLayout(layout)

class WPlugin(Plugin.DocumentationGenerator):
	def __init__(self, parent = None):
		Plugin.DocumentationGenerator.__init__(self, parent)

	def activate(self, model):
		doc = self._generateDocumentation(model)
		dialog = WTestSpecificationDialog(self.parent())
		dialog._view.setText(doc)
		dialog.exec_()
		return None

	def isDocumentTypeSupported(self, documentType):
		return documentType in [ DocumentModels.TYPE_ATS ]

	def _generateDocumentation(self, model):
		return "This is the documentation for %s" % model.getName()


###############################################################################
# Template-based code writer
###############################################################################

class WPluginConfiguration(Plugin.WPluginConfiguration):
	"""
	Configure fields to include in the extraction, default field values, ...
	"""
	def __init__(self, parent = None):
		Plugin.WPluginConfiguration.__init__(self, parent)
		self.__createWidgets()

	def __createWidgets(self):
		"""
		The model is in the saved settings.
		"""
		layout = QVBoxLayout()
		paramLayout = QGridLayout()
#		paramLayout.addWidget(QLabel("Templates file path:"), 0, 0)
#		paramLayout.addWidget(self.templatesPathLineEdit, 0, 1)
		layout.addLayout(paramLayout)

		self.setLayout(layout)

	def displayConfiguration(self):
		path = "plugins/%s" % PLUGIN_ID
		# Read the settings
		settings = QSettings()
		# No settings to read for now

	def saveConfiguration(self):
		"""
		Update the data model.
		"""
		settings = QSettings()
		path = "plugins/%s" % PLUGIN_ID
		# No settings to save for now
		return True

	def checkConfiguration(self):
		"""
		Check the data model, return 1 if OK, 0 if not.
		"""
		return True


PluginManager.registerPluginClass(PLUGIN_LABEL, PLUGIN_ID, WPlugin, description = PLUGIN_DESCRIPTION, version = PLUGIN_VERSION)

