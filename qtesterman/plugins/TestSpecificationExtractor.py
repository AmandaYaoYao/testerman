# -*- coding: utf-8 -*-
##
# This file is part of Testerman, a test automation system.
# Copyright (c) 2009 QTesterman contributors
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
##

##
# A documentation generator plugin that
# extracts test specifications from an ATS whose TestCases contain
# the following tags:
#
# @author
# @prerequisites
# @state
##

from PyQt4.Qt import *

import Documentation
import DocumentModels
import Plugin
import PluginManager

import base64
import compiler
import gc
import os

# Plugin ID, as generated by uuidgen / uuid.uuid1()
PLUGIN_ID = '8ce4cf4f-2451-11de-9b79-005056c00008'
PLUGIN_LABEL = "Test specification extraction"
PLUGIN_DESCRIPTION = "Extracts Test Specification from an ATS"
PLUGIN_VERSION = "1.0.0"


##############################################################################
# Python source code parser: docstring extractor
##############################################################################

class TestCaseDoc:
	def __init__(self, name, docstring):
		self.name = name
		self.docstring = docstring
		self.argumentsDocstring = '' # The body() docstring
		self.argument = []

class DocstringAstVisitor(compiler.visitor.ASTVisitor):
	"""
	Visits a Python AST to extract TestCase docstrings.
	"""
	def __init__(self):
		compiler.visitor.ASTVisitor.__init__(self)
		# a list of TestCaseDoc, in the order of appearance
		self._results = []
		
		self._currentTestCase = None

	def getResults(self):
		return self._results

	def walkChildren(self, node, parentTestCase):
		for child in node.getChildNodes():
			self.dispatch(child, parentTestCase)

	def visitClass(self, node, parent = None):
		if len(node.bases) > 0 and "TestCase" in [hasattr(x, 'name') and x.name or None for x in node.bases]:
			# This is a TestCase instance.
			currentTestCase = TestCaseDoc(node.name, Documentation.trim(node.doc))
			self._results.append(currentTestCase)
			# Search for its body() function.
			self.walkChildren(node.code, currentTestCase)

	def visitFunction(self, node, parent = None):
		if parent and node.name == 'body' and len(node.argnames) > 0 and node.argnames[0] == 'self':
			# This is the body function of a Test Case.
			# We should reference its docstring and arguments for Test Case parameters documentation.
			parent.argumentsDocstring = Documentation.trim(node.doc)
			parent.arguments = node.argnames[1:]


def getTestcaseDocs(buf):
	"""
	Returns a list of TestCaseDoc objects after parsing
	the core buffer (utf-8 string).
	"""
	ret = []
	visitor = DocstringAstVisitor()
	try:
		mod = compiler.parse(buf)
		visitor.preorder(mod, visitor, None)
		ret = visitor.getResults()
		del mod, visitor
	except SyntaxError:
		log("Syntax error, outline not created")
	finally:
		gc.collect()
	return ret


##############################################################################
# Output dialog
##############################################################################

class WTestSpecificationDialog(QDialog):
	"""
	A dialog to display the extracted test specification.
	"""
	def __init__(self, parent = None):
		QDialog.__init__(self, parent)
		self.__createWidgets()

	def __createWidgets(self):
		layout = QVBoxLayout()

		self._view = QTextEdit()
		self._view.setReadOnly(True)
		
		layout.addWidget(self._view)

		# Buttons
		self.okButton = QPushButton("Close")
		self.connect(self.okButton, SIGNAL("clicked()"), self.accept)
		buttonLayout = QHBoxLayout()
		buttonLayout.addStretch()
		buttonLayout.addWidget(self.okButton)
		layout.addLayout(buttonLayout)

		self.setLayout(layout)

##############################################################################
# Plugin
##############################################################################

class WPlugin(Plugin.DocumentationGenerator):
	def __init__(self, parent = None):
		Plugin.DocumentationGenerator.__init__(self, parent)

	def activate(self, model):
		doc = self._generateAtsDocumentation(model)
		dialog = WTestSpecificationDialog(self.parent())
		dialog._view.setHtml(doc)
		dialog.resize(800, 600)
		dialog.exec_()
		return None

	def isDocumentTypeSupported(self, documentType):
		return documentType in [ DocumentModels.TYPE_ATS ]

	def _generateAtsDocumentation(self, model):
		ret = []

		# Fills ATS-level variables
		variables = {}
		variables['ats-name'] = model.getName()
		variables['ats-path'] = model.getUrl().toString()
		
		template = """
<h1>Documentation for %(ats-name)s</h1>
<p>Path: %(ats-path)s</p>
<br />
"""

		ret.append(template % variables)

		tcdocs = getTestcaseDocs(model.getBody().encode('utf-8'))
		for tcdoc in tcdocs:
			ret.append(self._generateTestCaseDocumentation(tcdoc))

		return '\n'.join(ret)

	def _generateTestCaseDocumentation(self, tcdoc):
		"""
		@type  tcdoc: TestCaseDoc
		"""
		ret = []

		doc = Documentation.TaggedDocstring()
		doc.parse(tcdoc.docstring)

		variables = {}
		variables['name'] = tcdoc.name
		variables['arguments'] = ', '.join(tcdoc.arguments)
		variables['author'] = doc['author'].value('undefined')
		variables['purpose'] = doc['purpose'].value()
		variables['prerequisites'] = doc['prerequisites'].value()
		variables['creation-date'] = doc['date'].value()
		variables['state'] = doc['state'].value('writing')
		variables['regression'] = doc['regression'].value('yes')
		variables['origin'] = doc['regression'].value('')
		variables['type'] = doc['regression'].value('unknown')

		template = """
<table border="1" cellspacing="0" cellpadding="2" width="500">
 <tr><td colspan="2"><b>Test Case:</b> %(name)s</td></tr>
 <tr><td><b>Creation date:</b> %(creation-date)s</td><td><b>Created by:</b> %(author)s</td></tr>
 <tr><td colspan="2"><b>Test Description:</b></td></tr>
 <tr><td colspan="2">%(purpose)s</td></tr>
 <tr><td colspan="2"><b>Preconditions and Setup:</b></td></tr>
 <tr><td colspan="2">%(prerequisites)s</td></tr>
 <tr><td><b>Origin:</b> %(origin)s</td><td><b>Regression test:</b> %(regression)s</td></tr>
 <tr><td><b>Test Type:</b> %(type)s</td><td><b>Test Case State:</b> %(state)s</td></tr>
</table>
<br />
"""
		ret.append(template % variables)

		return '\n'.join(ret)

###############################################################################
# Plugin Configuration Dialog
###############################################################################

class WPluginConfiguration(Plugin.WPluginConfiguration):
	"""
	Configure fields to include in the extraction, default field values, ...
	"""
	def __init__(self, parent = None):
		Plugin.WPluginConfiguration.__init__(self, parent)
		self.__createWidgets()

	def __createWidgets(self):
		"""
		The model is in the saved settings.
		"""
		layout = QVBoxLayout()
		paramLayout = QGridLayout()
#		paramLayout.addWidget(QLabel("Templates file path:"), 0, 0)
#		paramLayout.addWidget(self.templatesPathLineEdit, 0, 1)
		layout.addLayout(paramLayout)

		self.setLayout(layout)

	def displayConfiguration(self):
		path = "plugins/%s" % PLUGIN_ID
		# Read the settings
		settings = QSettings()
		# No settings to read for now

	def saveConfiguration(self):
		"""
		Update the data model.
		"""
		settings = QSettings()
		path = "plugins/%s" % PLUGIN_ID
		# No settings to save for now
		return True

	def checkConfiguration(self):
		"""
		Check the data model, return 1 if OK, 0 if not.
		"""
		return True


PluginManager.registerPluginClass(PLUGIN_LABEL, PLUGIN_ID, WPlugin, description = PLUGIN_DESCRIPTION, version = PLUGIN_VERSION)

