# -*- coding: utf-8 -*-
##
# This file is part of Testerman, a test automation system.
# Copyright (c) 2009 QTesterman contributors
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
##

##
# A documentation generator plugin that
# extracts test specifications from an ATS whose TestCases contain
# the following tags:
#
# @author
# @prerequisites
# @state
# ...
##

from PyQt4.Qt import *
from PyQt4.QtXml import *
import PyQt4.QtWebKit as QtWebKit

from Base import *
from CommonWidgets import *

import Plugin
import PluginManager
import Documentation
import DocumentModels
import TemplateManagement

import base64
import compiler
import gc
import os


# Plugin ID, as generated by uuidgen / uuid.uuid1()
PLUGIN_ID = '8ce4cf4f-2451-11de-9b79-005056c00008'
PLUGIN_LABEL = "Test specification extraction"
PLUGIN_DESCRIPTION = "Extracts Test Specification from an ATS"
PLUGIN_VERSION = "1.0.0"


DEFAULT_TEMPLATE_FILENAME = "templates/default-testcase-specification.txt"


##############################################################################
# Variables wrappers
##############################################################################

class TestCaseVariables:
	"""
	Behaves as a dict to access testcase-related properties.
	"""
	def __init__(self, name, docstring):
		self._name = name
		self._taggedDescription = Documentation.TaggedDocstring()
		self._taggedDescription.parse(docstring)
		self._tags = Documentation.DictWrapper(self._taggedDescription)

	def __getitem__(self, name):
		if name == "id":
			return self._name
		elif name == "doc":
			# Complete, raw description
			return self._taggedDescription.getString()
		elif name == "description":
			# The untagged part of the docstring
			return self._taggedDescription[''].value()
		elif name == "tag":
			return self._tags
		else:
			raise KeyError(name)

##############################################################################
# Python source code parser: docstring extractor
##############################################################################

class DocstringAstVisitor(compiler.visitor.ASTVisitor):
	"""
	Visits a Python AST to extract TestCase docstrings.
	
	Creates a list of TestCaseVariables objects (one per TestCase found),
	that can be retrieved later with getResults().
	"""
	def __init__(self):
		compiler.visitor.ASTVisitor.__init__(self)
		# a list of TestCaseDoc, in the order of appearance
		self._results = []
		
		self._currentTestCase = None

	def getResults(self):
		return self._results

	def walkChildren(self, node, parentTestCase):
		for child in node.getChildNodes():
			self.dispatch(child, parentTestCase)

	def visitClass(self, node, parent = None):
		if len(node.bases) > 0 and "TestCase" in [hasattr(x, 'name') and x.name or None for x in node.bases]:
			# This is a TestCase instance.
			currentTestCase = TestCaseVariables(node.name, Documentation.trim(node.doc))
			self._results.append(currentTestCase)
			# Search for its body() function.
			self.walkChildren(node.code, currentTestCase)

	def visitFunction(self, node, parent = None):
		if parent and node.name == 'body' and len(node.argnames) > 0 and node.argnames[0] == 'self':
			# This is the body function of a Test Case.
			# We should reference its docstring and arguments for Test Case parameters documentation.
			parent.argumentsDocstring = Documentation.trim(node.doc)
			parent.arguments = node.argnames[1:]


def getTestCaseVariables(buf):
	"""
	Returns a list of TestCaseVariables objects after parsing
	the core buffer (utf-8 string).
	"""
	ret = []
	visitor = DocstringAstVisitor()
	try:
		mod = compiler.parse(buf)
		visitor.preorder(mod, visitor, None)
		ret = visitor.getResults()
		del mod, visitor
	except SyntaxError:
		log("Syntax error, ats not parsed")
	finally:
		gc.collect()
	return ret


##############################################################################
# Template Application Dialog
##############################################################################

class MyTemplateApplicationWidget(TemplateManagement.WTemplateApplicationWidget):
	def __init__(self, parent = None):
		TemplateManagement.WTemplateApplicationWidget.__init__(self, PLUGIN_ID, DEFAULT_TEMPLATE_FILENAME, parent)

	def getTemplateManagementDialog(self):
		import Preferences
		dialog = Preferences.WPluginSettingsDialog("Manage templates", WPluginConfiguration, self)
		return dialog

class WTestSpecificationDialog(QDialog):
	"""
	A dialog to display the extracted test specification.
	Embeds a TemplateManagement.WTemplateApplicationWidget into a dialog window.
	"""
	def __init__(self, context, parent = None):
		QDialog.__init__(self, parent)
		self.__createWidgets()
		self._templateApplicationWidget.applyTemplate(context)

	def __createWidgets(self):
		self.setWindowTitle("Test Cases Specification")
		layout = QVBoxLayout()

		self._templateApplicationWidget = MyTemplateApplicationWidget()
		layout.addWidget(self._templateApplicationWidget)

		# Dialog Buttons
		self._okButton = QPushButton("Close")
		self.connect(self._okButton, SIGNAL("clicked()"), self.accept)
		buttonLayout = QHBoxLayout()
		buttonLayout.addStretch()
		buttonLayout.addWidget(self._okButton)
		layout.addLayout(buttonLayout)

		self.setLayout(layout)


##############################################################################
# Plugin
##############################################################################

class WPlugin(Plugin.DocumentationGenerator):
	def __init__(self, parent = None):
		Plugin.DocumentationGenerator.__init__(self, parent)

	def activate(self, model):
		context = self._generateAtsDocumentationVariables(model)
		dialog = WTestSpecificationDialog(context, self.parent())
		dialog.resize(800, 600)
		dialog.exec_()

	def isDocumentTypeSupported(self, documentType):
		return documentType in [ DocumentModels.TYPE_ATS ]

	def _generateAtsDocumentationVariables(self, model):
		# Fills ATS-level variables
		variables = {}
		variables['ats'] = { 
			'id': model.getName(),
			'url': model.getUrl().toString(),
			'path': model.getUrl().path(),
		}
		# Testcases
		variables['testcases'] = getTestCaseVariables(unicode(model.getBodyModel()).encode('utf-8'))
		return variables


##############################################################################
# Template Management (Plugin Configuration)
##############################################################################

class WPluginConfiguration(Plugin.WPluginConfiguration):
	def __init__(self, parent = None):
		Plugin.WPluginConfiguration.__init__(self, parent)
		self.__createWidgets()

	##
	# Plugin.WPluginConfiguration reimplementation
	##
	def displayConfiguration(self):
		templateModels = TemplateManagement.loadTemplates(PLUGIN_ID, DEFAULT_TEMPLATE_FILENAME)
		self._templateView.setModel(templateModels)

	def saveConfiguration(self):
		ret = TemplateManagement.saveTemplates(self._templateView.getModel(), PLUGIN_ID)
		return ret

	def checkConfiguration(self):
		return True

	##
	# Implementation specific
	##
	def __createWidgets(self):
		self.setMinimumWidth(350)
		layout = QVBoxLayout()

		self._templateView = TemplateManagement.WTemplateTreeView()
		layout.addWidget(self._templateView)

		self.setLayout(layout)


PluginManager.registerPluginClass(PLUGIN_LABEL, PLUGIN_ID, WPlugin, WPluginConfiguration, description = PLUGIN_DESCRIPTION, version = PLUGIN_VERSION)

