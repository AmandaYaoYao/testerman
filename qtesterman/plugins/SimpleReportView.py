# -*- coding: utf-8 -*-
##
# This file is part of Testerman, a test automation system.
# Copyright (c) 2009 QTesterman contributors
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
##

##
# A plugin to display logs as a simple text summary.
#
##

from PyQt4.Qt import *
from PyQt4.QtXml import *

from Base import *
from CommonWidgets import *

import Plugin
import PluginManager
import Documentation

import string


# Plugin ID, as generated by uuidgen
PLUGIN_ID = "86d2d0a0-266e-4735-bb25-54378c7b1a1d"
VERSION = "1.0.0"
DESCRIPTION = """
A simple reporter that creates a text-based report with the following properties:
<ul>
	<li>TC ID, verdict, description</li>
	<li>If the verdict is not pass, contains user logs</li>
</ul>
"""


SUMMARY_HEADER_TEMPLATE = """
<h1>Execution results</h1>

<table>
<tr><td>Pass:</td><td><b>${pass-count} (${pass-ratio}%)</b></td></tr>
<tr><td>Fail:</td><td><b>${fail-count} (${fail-ratio}%)</b></td></tr>
</table>

<table border="1">
<tr><th>TestCase ID</th><th>Verdict</th></tr>
"""
SUMMARY_TESTCASE_TEMPLATE = "<tr><td>${testcase-id}</td><td>${testcase-verdict}</td></tr>\n"
SUMMARY_FOOTER_TEMPLATE = """</table>
"""
TESTCASES_HEADER_TEMPLATE = ""
TESTCASES_TESTCASE_TEMPLATE = """
<table border="1" width="800">
<tr><td>ID: ${testcase-id}</td><td>Title: ${testcase-title}</td></tr>
<tr><td colspan="2">Description:</td></tr>
<tr><td colspan="2">${testcase-description}</td></tr>
<tr><td colspan="2">User logs:</td></tr>
<tr><td colspan="2">${testcase-userlogs}</td></tr>
</table>
"""
TESTCASES_FOOTER_TEMPLATE = ""

class Template(string.Template):
	idpattern = "[_a-z][_a-z0-9-]*"


class TestcaseVariables:
	def __init__(self, model):
		self._model = model

		self._taggedDescription = Documentation.TaggedDocstring()
		self._taggedDescription.parse(self._model.getDescription())
		# extract starttime/stoptime
		self._startTime = 0.0
		self._stopTime = 0.0
		
		# extract user logs
		self._userLogs = [] # tuple of (timestamp, message)
	
	def appendLog(self, timestamp, log):
		self._logs.append((timestamp, log))
	
	def __getitem__(self, name):
		if name == "ats-id":
			return self._model.getAts().getId()
		elif name == "testcase-id":
			return self._model.getId()
		elif name == "testcase-title":
			return self._model.getTitle()
		elif name == "testcase-verdict":
			return self._model.getVerdict()
		elif name == "testcase-description":
			return self._model.getDescription().replace('\n', '<br />')
		elif name.startswith("testcase-description."):
			# description tag field
			n = name[21:]
			return self._taggedDescription[n].value().replace('\n', '<br />')
		elif name == "testcase-userlogs":
			ret = []
			for timestamp, log in self._userLogs:
				delta = timestamp - self._startTimestamp
				t = QTime().addMSecs(int(delta * 1000))
				ret.append('%s: %s' % (t.toString('+ hh:mm:ss.zzz'), log))
			return '\n'.join(ret)
		else:
			raise KeyError(name)
	

class WSimpleLogView(Plugin.WReportView):
	def __init__(self, parent = None):
		Plugin.WReportView.__init__(self, parent)
		
		self._ats = None
		self._currentTestcase = None
		
		self.__createWidgets()
	
	##
	# Implementation specific
	##
	def __createWidgets(self):
		layout = QVBoxLayout()

		# The text view
		self._textView = QTextEdit()
		self._textView.setReadOnly(1)
		font = QFont("courier", 8)
		font.setFixedPitch(True)
		font.setItalic(False)
		self._textView.setFont(font)
		self._textView.setLineWrapMode(QTextEdit.NoWrap)
		layout.addWidget(self._textView)
		
		self.setLayout(layout)

	def getSummaryVariables(self):
		"""
		Analyses the available log model, builds a list
		of dict usable for a summary template formatting.
		
		Provides the following template variables:
		
		for each testcase:
		ats-id, testcase-id, testcase-title, testcase-verdict
		
		summary/counts:
		ats-count, {pass,fail,inconc,none,error}-{count,ratio}
		"""
		count = 0
		counts = {}
		for s in ['pass', 'fail', 'inconc', 'none', 'error']:
			counts[s] = 0
		atsCount = 0

		testcaseSummaries = []
		for ats in self.getModel().getAtses():
			atsCount += 1
			for testcase in ats.getTestCases():
				testcaseSummaries.append({ 'ats-id': ats.getId(), 'testcase-id': testcase.getId(), 
				'testcase-title': testcase.getTitle(), 'testcase-verdict': testcase.getVerdict() })

				v = testcase.getVerdict()
				if v in counts:
					counts[v] += 1
				count += 1
		
		summary = { 'testcase-count': count,
			'ats-count': atsCount,
			'pass-count': counts['pass'],
			'fail-count': counts['fail'],
			'inconc-count': counts['inconc'],
			'none-count': counts['none'],
			'error-count': counts['error'],
			'pass-ratio': count and '%2.2f' % (float(counts['pass'])/float(count)*100.0) or '100',
			'fail-ratio': count and '%2.2f' % (float(counts['fail'])/float(count)*100.0) or '0',
			'inconc-ratio': count and '%2.2f' % (float(counts['inconc'])/float(count)*100.0) or '0',
			'none-ratio': count and '%2.2f' % (float(counts['none'])/float(count)*100.0) or '0',
			'error-ratio': count and '%2.2f' % (float(counts['error'])/float(count)*100.0) or '0',
		}
			
		return (summary, testcaseSummaries)

	def getTestCasesVariables(self):
		"""
		Returns a list of testcases variables
		"""
		ret = []
		
		for ats in self.getModel().getAtses():
			for testcase in ats.getTestCases():
				ret.append(TestcaseVariables(testcase))
		
		return ret

	##
	# Plugin.WReportView reimplementation
	##
	def displayLog(self):
		"""
		Plugin reimplementation.
		
		Analyses the current LogModel available through self.getModel(),
		displays a summary, 
		then each test case.
		"""
		
		ret = ""
		(summary, tcSummaries) = self.getSummaryVariables()
		ret += self.getSummaryHeaderTemplate().safe_substitute(summary)
		for tcSummary in tcSummaries:
			ret += self.getSummaryTestCaseTemplate().safe_substitute(tcSummary)
		ret += self.getSummaryFooterTemplate().safe_substitute(summary)
		
		ret += self.getTestCasesHeaderTemplate().safe_substitute(summary)
		for tc in self.getTestCasesVariables():
			ret += self.getTestCasesTestCaseTemplate().safe_substitute(tc)

		ret += self.getTestCasesFooterTemplate().safe_substitute(summary)
		self._textView.setHtml(ret)
		
	def clearLog(self):
		"""
		Plugin reimplementation.
		"""
		self._textView.clear()

	# TODO: use configurable templates
	def getSummaryHeaderTemplate(self):
		return Template(SUMMARY_HEADER_TEMPLATE)
	
	def getSummaryTestCaseTemplate(self):
		return Template(SUMMARY_TESTCASE_TEMPLATE)
	
	def getSummaryFooterTemplate(self):
		return Template(SUMMARY_FOOTER_TEMPLATE)
	
	def getTestCasesHeaderTemplate(self):
		return Template(TESTCASES_HEADER_TEMPLATE)
	
	def getTestCasesTestCaseTemplate(self):
		return Template(TESTCASES_TESTCASE_TEMPLATE)

	def getTestCasesFooterTemplate(self):
		return Template(TESTCASES_FOOTER_TEMPLATE)
	

class WSimpleLogViewConfiguration(Plugin.WPluginConfiguration):
	def __init__(self, parent = None):
		Plugin.WPluginConfiguration.__init__(self, parent)
		self.__createWidgets()

	##
	# Plugin.WPluginConfiguration reimplementation
	##
	def displayConfiguration(self):
		path = "plugins/%s" % PLUGIN_ID
		# Read the settings
		settings = QSettings()
		# xsltPath = settings.value(path + '/xsltpath', QVariant(QString(QApplication.instance().get('qtestermanpath')))).toString()

	def saveConfiguration(self):
		settings = QSettings()
		path = "plugins/%s" % PLUGIN_ID
		# settings.setValue(path + '/xsltpath', QVariant(self.xlstPathLineEdit.text()))
		return True

	def checkConfiguration(self):
		return True

	##
	# Implementation specific
	##
	def __createWidgets(self):
		layout = QVBoxLayout()

		self.setLayout(layout)



PluginManager.registerPluginClass("Simple Reporter", PLUGIN_ID, WSimpleLogView, WSimpleLogViewConfiguration, version = VERSION, description = DESCRIPTION)

